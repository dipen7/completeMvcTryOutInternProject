<!-- item template -->
<script type="text/x-template" id="item-template">
    <li>
        <div :class="{bold: isFolder}"
             @@click="toggle"
             @@dblclick="changeType">
            {{ model.name }}
            <span v-if="isFolder">[{{ open ? '-' : '+' }}]</span>
        </div>
        <ul v-show="open" v-if="isFolder">
            <item class="item"
                  v-for="(model, index) in model.children"
                  :key="index"
                  :model="model">
            </item>
            <li class="add" @@click="addChild">+</li>
        </ul>
    </li>
</script>

<p>(You can double click on an item to turn it into a folder.)</p>

<!-- the demo root element -->
<ul id="demo">
    <item class="item"
          :model="treeData">
    </item>
    <my-component></my-component>
    <my-component aprop=" with static data"></my-component>
    <my-component :aprop="Dynamic"></my-component>
    <multiprop v-bind="todo"></multiprop>
</ul>
<hr />
<div id="example-2">
    <simple-counter></simple-counter>
    <simple-counter></simple-counter>
    <simple-counter></simple-counter>
    <child my-message="dipednra"></child>
</div>
<div id="prop-example-2">
    <input v-model="parentMsg">
    <br>
    <child v-bind:my-message="parentMsg"></child>
</div>
@section scripts{

    <script type="text/javascript">
        //prop
        Vue.component('multiprop', {
            props: ['isComplete', 'text'],
            template: '<div>A custom multiprop component!{{text}} {{isComplete}}</div>'
        })

        Vue.component('child', {
            // declare the props
            props: ['aprop'],
            // like data, the prop can be used inside templates and
            // is also made available in the vm as this.message
            template: '<span>{{ aprop }}</span>'
        })

        Vue.component('my-component', {
            props: ['aprop'],
            template: '<div>A custom component!{{aprop}}</div>'
        })
        //prop

        //proops 2

        new Vue({
            el: '#prop-example-2',
            data: {
                parentMsg: 'Message from parent',
                todo: {
                    text: 'Learn Vue',
                    isComplete: false
                }
            }
        })
        //proops
        Vue.component('child', {
            // declare the props
            props: ['myMessage'],
            // like data, the prop can be used inside templates and
            // is also made available in the vm as this.message
            template: '<span>{{ myMessage }}</span>'
        })

        //counter data function
        var data = { counter: 0 }

        Vue.component('simple-counter', {
            template: '<button v-on:click="counter += 1">{{ counter }}</button>',
            // data is technically a function, so Vue won't
            // complain, but we return the same object
            // reference for each component instance
            //data: function () {
            //    return data
            //}
            data: function () {
                return {
                    counter: 0
                }
            }
        })

        new Vue({
            el: '#example-2'
        })

        //tree element
        var data = {
            name: 'My Tree',
            children: [
                { name: 'hello' },
                { name: 'wat' },
                {
                    name: 'child folder',
                    children: [
                        {
                            name: 'child folder',
                            children: [
                                { name: 'hello' },
                                { name: 'wat' }
                            ]
                        },
                        { name: 'hello' },
                        { name: 'wat' },
                        {
                            name: 'child folder',
                            children: [
                                { name: 'hello' },
                                { name: 'wat' }
                            ]
                        }
                    ]
                }
            ]
        }

        // define the item component
        Vue.component('item', {
            template: '#item-template',
            props: {
                model: Object
            },
            data: function () {
                return {
                    open: false
                }
            },
            computed: {
                isFolder: function () {
                    return this.model.children &&
                        this.model.children.length
                }
            },
            methods: {
                toggle: function () {
                    if (this.isFolder) {
                        this.open = !this.open
                    }
                },
                changeType: function () {
                    if (!this.isFolder) {
                        Vue.set(this.model, 'children', [])
                        this.addChild()
                        this.open = true
                    }
                },
                addChild: function () {
                    this.model.children.push({
                        name: 'new stuff'
                    })
                }
            }
        })

        // boot up the demo
        var demo = new Vue({
            el: '#demo',
            data: {
                todo: {
                    text: 'Learn Vue',
                    isComplete: false
                },
                Dynamic: " dynamic data",
                treeData: data
            }
        })
        function previewimage(event) {
            var reader = new FileReader();
            var imageField = document.getElementById("image-field")
            reader.onload = function () {
                if (reader.readyState == 2) {
                    imageField.src = reader.result;
                }
            }
            reader.readAsDataURL(event.target.files[0]);
        }
    </script>
}